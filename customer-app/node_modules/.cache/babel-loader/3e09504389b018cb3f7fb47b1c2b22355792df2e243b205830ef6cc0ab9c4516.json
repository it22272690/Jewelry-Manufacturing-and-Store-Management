{"ast":null,"code":"import axios from 'axios';\nimport { api } from '../urlConfig';\nimport store from '../store';\nimport { authConstants } from '../actions/constants';\n\n// Function to refresh token\nexport const refreshToken = async () => {\n  try {\n    // Retrieve the refresh token from local storage\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    // Send a request to the server to refresh the token\n    const response = await axios.post(`${api}/refresh_token`, {\n      refreshToken\n    });\n\n    // Extract the new access token from the response\n    const newAccessToken = response.data.accessToken;\n\n    // Update the access token in local storage\n    localStorage.setItem('token', newAccessToken);\n\n    // Return the new access token\n    return newAccessToken;\n  } catch (error) {\n    // Handle error (e.g., log, notify user, etc.)\n    console.error('Error refreshing token:', error);\n    throw error;\n  }\n};\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: api,\n  headers: {\n    'Authorization': localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''\n  }\n});\n\n// Request interceptor\naxiosInstance.interceptors.request.use(async config => {\n  const {\n    auth\n  } = store.getState();\n\n  // Add authorization header if a token exists in the store\n  if (auth.token) {\n    config.headers.Authorization = `Bearer ${auth.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const {\n    status\n  } = error.response;\n\n  // Check if the error status is 401 (Unauthorized)\n  if (status === 401) {\n    try {\n      // Refresh the token\n      const newAccessToken = await refreshToken();\n\n      // Retry the original request with the new access token\n      const originalRequest = error.config;\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n      return axiosInstance(originalRequest);\n    } catch (refreshError) {\n      // If token refresh fails, logout the user\n      localStorage.clear();\n      store.dispatch({\n        type: authConstants.LOGOUT_REQUEST\n      });\n    }\n  }\n\n  // Return the error\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","api","store","authConstants","refreshToken","localStorage","getItem","response","post","newAccessToken","data","accessToken","setItem","error","console","axiosInstance","create","baseURL","headers","interceptors","request","use","config","auth","getState","token","Authorization","Promise","reject","status","originalRequest","refreshError","clear","dispatch","type","LOGOUT_REQUEST"],"sources":["C:/Users/USER/AppData/Roaming/Jewelry-Manufacturing-and-Store-Management/customer-app/src/helpers/axios.js"],"sourcesContent":["import axios from 'axios';\r\nimport { api } from '../urlConfig';\r\nimport store from '../store';\r\nimport { authConstants } from '../actions/constants';\r\n\r\n// Function to refresh token\r\nexport const refreshToken = async () => {\r\n  try {\r\n    // Retrieve the refresh token from local storage\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n    // Send a request to the server to refresh the token\r\n    const response = await axios.post(`${api}/refresh_token`, { refreshToken });\r\n\r\n    // Extract the new access token from the response\r\n    const newAccessToken = response.data.accessToken;\r\n\r\n    // Update the access token in local storage\r\n    localStorage.setItem('token', newAccessToken);\r\n\r\n    // Return the new access token\r\n    return newAccessToken;\r\n  } catch (error) {\r\n    // Handle error (e.g., log, notify user, etc.)\r\n    console.error('Error refreshing token:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create an Axios instance\r\nconst axiosInstance = axios.create({\r\n  baseURL: api,\r\n  headers: {\r\n    'Authorization': localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''\r\n  }\r\n});\r\n\r\n// Request interceptor\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  const { auth } = store.getState();\r\n\r\n  // Add authorization header if a token exists in the store\r\n  if (auth.token) {\r\n    config.headers.Authorization = `Bearer ${auth.token}`;\r\n  }\r\n\r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Response interceptor\r\naxiosInstance.interceptors.response.use(response => {\r\n  return response;\r\n}, async (error) => {\r\n  const { status } = error.response;\r\n\r\n  // Check if the error status is 401 (Unauthorized)\r\n  if (status === 401) {\r\n    try {\r\n      // Refresh the token\r\n      const newAccessToken = await refreshToken();\r\n\r\n      // Retry the original request with the new access token\r\n      const originalRequest = error.config;\r\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n      return axiosInstance(originalRequest);\r\n    } catch (refreshError) {\r\n      // If token refresh fails, logout the user\r\n      localStorage.clear();\r\n      store.dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n    }\r\n  }\r\n\r\n  // Return the error\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,cAAc;AAClC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,aAAa,QAAQ,sBAAsB;;AAEpD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF;IACA,MAAMA,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;IAEzD;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAE,GAAEP,GAAI,gBAAe,EAAE;MAAEG;IAAa,CAAC,CAAC;;IAE3E;IACA,MAAMK,cAAc,GAAGF,QAAQ,CAACG,IAAI,CAACC,WAAW;;IAEhD;IACAN,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEH,cAAc,CAAC;;IAE7C;IACA,OAAOA,cAAc;EACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,aAAa,GAAGf,KAAK,CAACgB,MAAM,CAAC;EACjCC,OAAO,EAAEhB,GAAG;EACZiB,OAAO,EAAE;IACP,eAAe,EAAEb,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAI,UAASD,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC,GAAG;EAC/F;AACF,CAAC,CAAC;;AAEF;AACAS,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACvD,MAAM;IAAEC;EAAK,CAAC,GAAGrB,KAAK,CAACsB,QAAQ,CAAC,CAAC;;EAEjC;EACA,IAAID,IAAI,CAACE,KAAK,EAAE;IACdH,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAI,UAASH,IAAI,CAACE,KAAM,EAAC;EACvD;EAEA,OAAOH,MAAM;AACf,CAAC,EAAET,KAAK,IAAI;EACV,OAAOc,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAE,aAAa,CAACI,YAAY,CAACZ,QAAQ,CAACc,GAAG,CAACd,QAAQ,IAAI;EAClD,OAAOA,QAAQ;AACjB,CAAC,EAAE,MAAOM,KAAK,IAAK;EAClB,MAAM;IAAEgB;EAAO,CAAC,GAAGhB,KAAK,CAACN,QAAQ;;EAEjC;EACA,IAAIsB,MAAM,KAAK,GAAG,EAAE;IAClB,IAAI;MACF;MACA,MAAMpB,cAAc,GAAG,MAAML,YAAY,CAAC,CAAC;;MAE3C;MACA,MAAM0B,eAAe,GAAGjB,KAAK,CAACS,MAAM;MACpCQ,eAAe,CAACZ,OAAO,CAACQ,aAAa,GAAI,UAASjB,cAAe,EAAC;MAClE,OAAOM,aAAa,CAACe,eAAe,CAAC;IACvC,CAAC,CAAC,OAAOC,YAAY,EAAE;MACrB;MACA1B,YAAY,CAAC2B,KAAK,CAAC,CAAC;MACpB9B,KAAK,CAAC+B,QAAQ,CAAC;QAAEC,IAAI,EAAE/B,aAAa,CAACgC;MAAe,CAAC,CAAC;IACxD;EACF;;EAEA;EACA,OAAOR,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}