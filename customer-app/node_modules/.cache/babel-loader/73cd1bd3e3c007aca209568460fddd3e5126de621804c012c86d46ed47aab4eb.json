{"ast":null,"code":"var _s = $RefreshSig$();\n// Header.js\nimport React, { useState } from 'react';\nimport './style.css';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../../actions';\nimport { useHistory } from 'react-router-dom'; // Import useHistory hook\n\nconst Header = () => {\n  _s();\n  const [showLoginForm, setShowLoginForm] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory(); // Use useHistory hook\n\n  const handleLoginButtonClick = () => {\n    setShowLoginForm(true);\n  };\n  const userLogin = () => {\n    // Retrieve email and password values from the input fields\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n\n    // Simulate login success for demonstration\n    // In real-world scenario, this should be replaced with actual login logic\n    if (email === 'customer@example.com' && password === 'password') {\n      // Redirect to customer dashboard upon successful login\n      history.push('/customer-dashboard');\n    } else {\n      // Dispatch login action with email and password\n      dispatch(login({\n        email,\n        password\n      }));\n    }\n  };\n\n  // Rest of the component remains the same\n};\n_s(Header, \"17lm7lKpT7vK4pTc+rVwM7rolg4=\", false, function () {\n  return [useDispatch, useHistory];\n});\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useDispatch","login","useHistory","Header","_s","showLoginForm","setShowLoginForm","dispatch","history","handleLoginButtonClick","userLogin","email","document","getElementById","value","password","push","_c","$RefreshReg$"],"sources":["C:/Users/USER/AppData/Roaming/Jewelry-Manufacturing-and-Store-Management/customer-app/src/components/Header/index.js"],"sourcesContent":["// Header.js\r\nimport React, { useState } from 'react';\r\nimport './style.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../../actions';\r\nimport { useHistory } from 'react-router-dom'; // Import useHistory hook\r\n\r\nconst Header = () => {\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory(); // Use useHistory hook\r\n\r\n  const handleLoginButtonClick = () => {\r\n    setShowLoginForm(true);\r\n  };\r\n\r\n  const userLogin = () => {\r\n    // Retrieve email and password values from the input fields\r\n    const email = document.getElementById('email').value;\r\n    const password = document.getElementById('password').value;\r\n\r\n    // Simulate login success for demonstration\r\n    // In real-world scenario, this should be replaced with actual login logic\r\n    if (email === 'customer@example.com' && password === 'password') {\r\n      // Redirect to customer dashboard upon successful login\r\n      history.push('/customer-dashboard');\r\n    } else {\r\n      // Dispatch login action with email and password\r\n      dispatch(login({ email, password }));\r\n    }\r\n  };\r\n\r\n  // Rest of the component remains the same\r\n};\r\n\r\nexport default Header;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,UAAU,QAAQ,kBAAkB,CAAC,CAAC;;AAE/C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,OAAO,GAAGN,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE9B,MAAMO,sBAAsB,GAAGA,CAAA,KAAM;IACnCH,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMI,SAAS,GAAGA,CAAA,KAAM;IACtB;IACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,KAAK;IACpD,MAAMC,QAAQ,GAAGH,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,KAAK;;IAE1D;IACA;IACA,IAAIH,KAAK,KAAK,sBAAsB,IAAII,QAAQ,KAAK,UAAU,EAAE;MAC/D;MACAP,OAAO,CAACQ,IAAI,CAAC,qBAAqB,CAAC;IACrC,CAAC,MAAM;MACL;MACAT,QAAQ,CAACN,KAAK,CAAC;QAAEU,KAAK;QAAEI;MAAS,CAAC,CAAC,CAAC;IACtC;EACF,CAAC;;EAED;AACF,CAAC;AAACX,EAAA,CA1BID,MAAM;EAAA,QAEOH,WAAW,EACZE,UAAU;AAAA;AAAAe,EAAA,GAHtBd,MAAM;AA4BZ,eAAeA,MAAM;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}